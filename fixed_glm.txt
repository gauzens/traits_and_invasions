
    model
    {
    # priors
    # warning, this writing works only because the number of factor is equal to the number of means
    for(j in 1:nb.factors)
    {
	    beta[j] ~ dnorm(0.006, 1.0E-6)
	    # residuals, group specific
	    sigma[j] ~ dunif(0,100) 
	    tau.e[j] <- 1/(sigma[j]*sigma[j])
    }


    
    # likelihood
    for(i in 1:N)
    {
    # here X is the design matrix of the model 
    # model.matrix( ~ fact1 * fact2 )
    # so model is: mean[j] = beta[1] + beta[2]*voisin + beta[3]*herbi + beta[4]*voisin*herbi
    mean[i] = beta[] %*% X[i,]
    y[i] ~ dnorm(mean[i], tau.e[id.factor[i]])
    
    }
    
    
    }
    
    
